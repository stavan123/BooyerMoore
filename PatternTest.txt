
def badCharHeuristic(string, size):
	badChar = [-1]*256
	for i in range(size):
		badChar[ord(string[i])] = i;
	return badChar

def search(txt, pat):
	m = len(pat)
	n = len(txt)
	badChar = badCharHeuristic(pat, m)
	s= 0
	while(s <= n-m):
		j = m-1
		while j>=0 and pat[j] == txt[s+j]:
			j -= 1
		if j<0:
			print("Pattern occur at shift = {}".format(s))
			s += (m-badChar[ord(txt[s+m])] if s+m<n else 1)
		else:
			s += max(1, j-badChar[ord(txt[s+j])])

print("Boyer Moore String Matching Algorithm by Bad Character Heuristic Approach")
txt = input("Enter text: ")
pat = input("Enter pattern to search in the text: ")
search(txt, pat)


import sys
import re
import os
dir = input ("Enter the directory")
text1 = input ("Enter the pattern file")
if os.path.isdir(dir) == 0:
    print("The directory does not exist")
    sys.exit(0)
for textfile in os.listdir(dir):
    if textfile[0] == "." :
        continue